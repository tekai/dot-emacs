;; -*- mode: emacs-lisp -*-

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(setq-default inhibit-startup-message 't
              tool-bar-mode nil
              scroll-margin 0
              scroll-preserve-screen-position nil
              cursor-in-non-selected-windows nil)

(setq default-frame-alist '((font-backend . "xft")
                            (font . "DejaVu Sans Mono-9")
                            ;; (font . "Inconsolata-11")
                            (vertical-scroll-bars . right)
                            (tool-bar-lines . 0)))

;; no toolbar, no menu for me
(tool-bar-mode -1)
(menu-bar-mode -1)

;; Set Zmacs mode (highlight marked text)
(transient-mark-mode t)

;; parentheses
(show-paren-mode t)
(setq parens-require-spaces nil)
(setq show-paren-style 'expression)

;; Show Row and Column
(line-number-mode t)
(column-number-mode t)

;; always make a backup~ (except for VCd files)
(setq backup-inhibited nil)
(setq make-backup-files t)

;; no more "command attempted to use minibuffer while in minibuffer"
(setq enable-recursive-minibuffers t)

;; save history of minibuffer between sessions
(savehist-mode 1)
(setq history-length 1000)

(prefer-coding-system 'utf-8)

(setq save-interprogram-paste-before-kill t)

;; MUST BE BEFORE ANY REQUIRE ETC.
;; load the newer file of .el / .elc
(setq load-prefer-newer t)

(require 'cl)
;; custom keybindings
(require 'hippie-exp)
(global-set-key [C-tab] 'other-window)
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1)))
(global-set-key "\M-g" 'goto-line)
(global-set-key "\M-E" 'hippie-expand) ; for the Mac
(global-set-key "\C-cf" 'ag-project)
(global-set-key [(super e)] 'hippie-expand)
(global-set-key [(super s)] 'isearch-forward-regexp)
(global-set-key [(hyper <)] 'end-of-buffer)
(global-set-key [(super r)] (lambda () (interactive) (revert-buffer nil t)))
(global-set-key [S-iso-lefttab] (lambda () (interactive) (let ((indent-tabs-mode t)) (insert-tab))))
(global-set-key (kbd "C-c C-SPC") 'delete-horizontal-space)
(global-set-key [(hyper .)] 'find-tag-other-window)
(global-set-key [C-M-backspace] 'backward-kill-sexp) ; WARNING: by default this kills the X server!!
(global-set-key "[" 'insert-pair)
(global-set-key "\"" 'insert-pair)
(global-set-key "\M-'" 'insert-pair)
(global-set-key "(" 'insert-parentheses)
(global-set-key (kbd "C-M-z") 'kill-backward-up-list)
(global-set-key "\M-_" 'align-regexp)
(global-set-key (kbd "<f9>") 'compile)
(global-set-key (kbd "C-c \"")
                (lambda (arg)
                  (interactive "P")
                  (if arg (setq arg (prefix-numeric-value arg))
                    (setq arg 0))
                  (insert-pair arg ?„ ?“)))
(global-unset-key [f11]) ; use M-x toogle-frame-fullscreen instead

;; M-% = query-replace
;; M-& = query-replace-regexp
(global-set-key "\M-&" 'query-replace-regexp)
;; Non-nil means `query-replace' should preserve case in replacements.
(setq case-replace nil)

;;; Various indentation settings
(setq-default c-basic-offset 4)
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq-default tab-always-indent t)
(setq-default truncate-lines nil)
(electric-indent-mode -1)

;; start server for emacsclient ()
;; (server-start)
(setq server-visit-hook 'raise-frame)
(setq gnuserv-frame (selected-frame))

;; maximum font lock
(require 'font-lock)
;; (require 'lazy-lock)
;; (setq font-lock-support-mode '((php-mode . lazy-lock-mode) (t . jit-lock-mode)))
(setq font-lock-support-mode '((t . jit-lock-mode)))
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)

;; change buffer naming strategy from file<2> to file:dir/dir
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward
      uniquify-separator ":")

;;; Angry keywords faces
;;FIXME
(setq font-lock-fixme-face (make-face 'font-lock-fixme-face))
(set-face-foreground 'font-lock-fixme-face "Red")
(set-face-background 'font-lock-fixme-face "Yellow")
(make-face-bold 'font-lock-fixme-face)
(font-lock-add-keywords
     'php-mode '(("\\<\\(FIXME\\)" 1 font-lock-fixme-face t)))
(font-lock-add-keywords
     'js2-mode '(("\\<\\(FIXME\\)" 1 font-lock-fixme-face t)))

;; TODO faces
(setq font-lock-todo-face (make-face 'font-lock-todo-face))
(set-face-foreground 'font-lock-todo-face "Blue")
(set-face-background 'font-lock-todo-face "Yellow")
(make-face-bold 'font-lock-todo-face)
(font-lock-add-keywords
    'php-mode '(("\\<\\(TODO\\)" 1 font-lock-todo-face t)))
(font-lock-add-keywords
    'js2-mode '(("\\<\\(TODO\\)" 1 font-lock-todo-face t)))

;; RED HACK
(setq font-lock-hack-face (make-face 'font-lock-hack-face))
(set-face-foreground 'font-lock-hack-face "White")
(set-face-background 'font-lock-hack-face "Red")
(make-face-bold 'font-lock-hack-face)
(font-lock-add-keywords
    'php-mode '(("\\<\\(HACK\\)" 1 font-lock-hack-face t)))
(font-lock-add-keywords
    'js2-mode '(("\\<\\(HACK\\)" 1 font-lock-hack-face t)))

;;; Set up load-path
(add-to-list 'load-path "~/.emacs.d/libs")
(add-to-list 'load-path "~/.emacs.d/libs/git-modes")
(add-to-list 'load-path "~/.emacs.d/libs/magit")
(add-to-list 'load-path "~/.emacs.d/libs/g-client")
(add-to-list 'load-path "~/.emacs.d/libs/geben")

;; Mac stuff
(when (eq system-type 'darwin)
  (when (memq window-system '(mac ns))
    (require 'exec-path-from-shell)
    (exec-path-from-shell-initialize))

  ;; Allow alt-n on the mac to produce [],|,{}, etc
  ;; (has to be done after after modifying load-path)
  (setq mac-command-modifier 'meta
        mac-option-modifier nil))

;;; Set up major/minor-modes

;(require 'elisp-slime-nav)
;(dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
;  (add-hook hook 'elisp-slime-nav-mode))

;;; Tramp
(setq tramp-default-method "ssh")

;;; Abbrev
;; ensure abbrev mode is always on
(setq-default abbrev-mode t)
;; do not bug me about saving my abbreviations
(setq save-abbrevs nil)

;;; C Modes
(add-hook 'c-mode-common-hook
          (lambda ()
            (c-set-offset 'case-label '+)          ; case n: is indented
            (c-set-offset 'substatement-open 0)
            (c-set-offset 'cpp-macro 0)
            (c-set-offset 'arglist-intro '+)
            ;; funktion um else/if ( => ++, sonst => + zu erwirken
            (c-set-offset 'arglist-cont-nonempty '+)))

(setq c-default-style
      '((java-mode . "java")
        (awk-mode . "awk")
        (c-mode . "bsd")
        (other . "gnu")))

;;; PHP
(require 'php-mode)
(setq php-template-compatibility nil
      php-lineup-cascaded-calls nil
      php-mode-warn-if-mumamo-off "Don't warn"
      php-search-url nil
      php-template-compatibility nil
      php-manual-url  'en
      php-mode-coding-style 'default)

(define-key php-mode-map "'" 'insert-pair)
(define-key php-mode-map "(" 'insert-parentheses)
(define-key php-mode-map "\C-c\C-d" 'php-search-documentation)
(define-key php-mode-map (kbd "<f10>") 'php-debug-file)
(define-key php-mode-map [f11] 'php-check-syntax-and-goto-line)
(add-hook 'php-mode-hook
          '(lambda ()
            (hs-minor-mode 1)
            ;(flymake-mode 1) ; will nicht mit geben
            (set (make-local-variable 'compile-command)
             (let ((file (file-name-nondirectory buffer-file-name)))
               (concat "php -l " file)))))

;;; SQL Mode
(setq sql-product 'mysql)
(add-hook 'sql-mode-hook
          (lambda ()
            (sql-highlight-mysql-keywords)))

;;; Hide-Show
(require 'hideshow)
(add-to-list 'hs-special-modes-alist
             '(php-mode "{" "}" "/[*/]" nil hs-c-like-adjust-block-beginning))
(define-key hs-minor-mode-map [(super c)] 'hs-toggle-hiding)
(define-key hs-minor-mode-map (kbd "C-c q C-c") 'hs-toggle-hiding)
(define-key hs-minor-mode-map (kbd "C-c q C-l") 'hs-hide-level)
(define-key hs-minor-mode-map (kbd "C-c q C-M-s") 'hs-show-all)

;;; org mode
(require 'org)
(add-hook 'org-mode-hook 'visual-line-mode)
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
(setq org-fontify-done-headline t)
(setq org-enforce-todo-dependencies t)
(setq org-agenda-todo-list-sublevels nil) ; only top-level todos in agenda
(setq org-log-done 'time)
(setq org-descriptive-links t) ; show literal links, nicer for tex citation
(define-key org-mode-map (kbd "<mouse-6>") 'outline-previous-visible-heading)
(define-key org-mode-map (kbd "<mouse-7>") 'outline-next-visible-heading)
(define-key org-mode-map (kbd "C-<mouse-6>") 'outline-up-heading)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cl" 'org-store-link)

;; Org LaTeX setup
(setq org-latex-default-packages-alist
      '(("" "fontspec" t)
        ("" "xunicode" t)
        ("" "url" t)
        ("xetex,hidelinks" "hyperref" nil) ; hidelinks not in this version
        ("" "fixltx2e" nil)
        ("" "graphicx" t)
        ("" "longtable" nil)
        ("" "float" nil)
        ("" "wrapfig" nil)
        ("" "soul" t)
        ("" "changes" t)
        ("babel" "csquotes" t)
        "\\tolerance=1000"))
(setq org-latex-pdf-process '("latexmk -xelatex -bibtex-cond -f %f" "latexmk -xelatex -bibtex-cond -f -c %f"))

(defun ees/org-sort-todo-list ()
  "Sort buffer in alphabetical order, then priority, then by TODO."
  (interactive)
  (save-excursion
    (mark-whole-buffer)
    (org-sort-entries nil ?a)
    (org-sort-entries nil ?p)
    (org-sort-entries nil ?O))
  (org-overview))


;;; Set up Slime
;; (setq lisp-indent-function #'common-lisp-indent-function)
;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
;; ;; Replace "sbcl" with the path to your implementation
;; (setq inferior-lisp-program "clozure-cl")

;;: JS2 Mode by S. Yegge
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
;; js2-mode rebinds this to some debugging aid instead of mouse-set-point
;; and thus C-s begins a region
;;(define-key js2-mode-map [mouse-1] nil)


;;; RFCview
(add-to-list 'auto-mode-alist
             '("/\\(rfc\\|std\\)[0-9]+\\.txt\\'" . rfcview-mode))
(autoload 'rfcview-mode "rfcview" nil t)

;;; ack - better than grep
(autoload 'ack-same "full-ack" nil t)
(autoload 'ack "full-ack" nil t)
(autoload 'ack-find-same-file "full-ack" nil t)
(autoload 'ack-find-file "full-ack" nil t)


;;; ag even better than ack
(setq ag-highlight-search t)

;;; LUA
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
(setq lua-indent-level 2) ; because that's easier ingame

;;; TeX
(setq tex-run-command "xetex")
(setq latex-run-command "xelatex")

;;; PHP debugger
(autoload 'geben "geben" "PHP Debugger on Emacs" t)
(setq geben-source-coding-system 'latin-9)

;;; Projekt Mode
(require 'projekt)

;;; magit
(autoload 'magit-status "magit" "eMagic for git" t)
(setq magit-last-seen-setup-instructions "1.4.0"
      magit-auto-revert-mode nil
      magit-push-always-verify nil)
(global-set-key (kbd "C-c m") 'magit-status)

;; smerge - merging conflicts made easy
(autoload 'smerge-mode "smerge-mode" nil t)
(defun sm-try-smerge ()
  (save-excursion
    (goto-char (point-min))
    (when (re-search-forward "^<<<<<<< " nil t)
      (smerge-mode 1))))
(add-hook 'find-file-hook 'sm-try-smerge t)

;;; Markdown
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(autoload 'gfm-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

;;; My own simple functions
;;; aka kleine Helferlein
(defun kill-whitespace ()
  "Kills whitespace at the end of a line in the buffer"
  (interactive)
  (push-mark)
  (goto-char (point-min))
  (let ((eol (coding-system-eol-type buffer-file-coding-system)))
    (if (and (numberp eol) (= 0 eol))
        (replace-regexp "[ \t\r]+$" "") ; eliminate CR in unix files
        (replace-regexp "[ \t]+$" "")))
  (set-mark-command t)
  (set-mark-command t))
(global-set-key "\C-cw" 'kill-whitespace)

(defun insert-curly (arg)
  "Like insert-parenthesis, nah, it does indenting and doesn't move over
 words but lines"
  (interactive "P")
  (if arg (setq arg (prefix-numeric-value arg))
      (setq arg 0))
  (cond ((> arg 0) (skip-chars-forward " \t"))
        ((< arg 0) (forward-sexp arg) (setq arg (- arg))))
  (insert "{")
  (let ((point (point)))
    (save-excursion
      (or (eq arg 0) (forward-line (1+ arg)))
      ;; (and (eq arg 0) (insert "\n"))
      (insert "}\n")
      (indent-region point (+ 1 (point)) nil)
      (backward-char -2))))
(global-set-key "\M-{" 'insert-curly)

(defun toggle-line-comment ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (let ((beg (point)))
      (end-of-line)
      (comment-or-uncomment-region beg (point)))))
(global-set-key [?\C-7] 'toggle-line-comment)

(defun insert-buffer-name ()
  (interactive)
  (insert (buffer-name)))

(defun insert-buffer-file-name ()
  (interactive)
  (insert (buffer-file-name)))

(defun kill-buffer-and-delete-frame ()
  (interactive)
  (when (kill-buffer)
    (delete-frame)))
(global-set-key (kbd "C-x 5 k") 'kill-buffer-and-delete-frame)
;; erm something to read...
(defun jargon ()
  (interactive)
  (find-file "~/doc/jargon-1.5.0.dos.txt"))

;; nur vor find-tag, nicht vor find-tag-other-window
(setq max-tags-depth 6)
(defadvice find-tag (before find-tag-file-sw activate)
  "Automatically search for tags in higher directories."
  (let ((depth 0)
        (file "TAGS"))
    (while (and (< depth max-tags-depth)
                (not (file-exists-p file)))
      (setq file (concat "../" file))
      (setq depth (+ depth 1)))
    (when (file-exists-p file)
      (visit-tags-table (file-truename file)))))

(defadvice find-tag-other-window (before find-tag-file-ow activate)
  "Automatically search for tags in higher directories."
  (let ((depth 0)
        (file "TAGS"))
    (while (and (< depth max-tags-depth)
                (not (file-exists-p file)))
      (setq file (concat "../" file))
      (setq depth (+ depth 1)))
    (when (file-exists-p file)
      (visit-tags-table (file-truename file)))))

;; doesn't execute when loaded as daemon
(defun explorer ()
  "Open file browser window at the buffers current directory."
  (interactive)
  (let ((dir default-directory))
    (case window-system
      ('w32 (w32-shell-execute "open" "explorer" (concat "/e,/select," dir)))
      ('ns (shell-command (format "open %s" dir) nil))
      ('x (call-process "xterm" nil 0 nil) nil))))

;(setq Info-dir-contents nil) ;; to reset & reread info dirs
;;; LOAD custom libraries
(let ((host-file (format "~/.emacs.d/%s.el" system-name)))
  (when (file-exists-p host-file)
      (load-file host-file)))

;;; Stuff that emacs modifies herself
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(variable-pitch ((t (:family "DejaVu Sans")))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(css-indent-level 2)
 '(css-indent-offset 2)
 '(delete-selection-mode nil)
 '(diff-switches (quote ("-u" "-w")))
 '(fill-column 72)
 '(grep-command "grep -nH -r -e ")
 '(grep-template "grep <C> -nH -r -e <R> <F>")
 '(inhibit-startup-screen nil)
 '(js2-allow-keywords-as-property-names nil)
 '(js2-highlight-level 3)
 '(js2-use-font-lock-faces t)
 '(keyboard-coding-system (quote iso-8859-1))
 '(magit-diff-options (quote ("--ignore-all-space")))
 '(package-selected-packages (quote (phpunit ag)))
 '(safe-local-variable-values
   (quote
    ((org-confirm-babel-evaluate)
     (buffer-file-coding-system . latin-9)
     (Syntax . COMMON-LISP)
     (Package . CL-USER)
     (Base . 10)
     (sql-product . mysql)
     (c-basic-indent . 4)
     (mule-coding . latin-9)
     (c-basic-indent . 2))))
 '(scroll-bar-mode (quote right))
 '(show-paren-mode t)
 '(twitter-username "tekai")
 '(w3m-no-proxy-domains (quote ("eeschner.local" "eeschner.office")))
 '(w3m-use-cookies t)
 '(w3m-use-favicon nil))

(put 'narrow-to-region 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
